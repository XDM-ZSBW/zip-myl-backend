// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Thought {
  id        String   @id @default(uuid()) @db.Uuid
  content   String   @db.Text
  metadata  Json?
  userId    String?  @db.Uuid
  url       String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for better query performance
  @@index([userId])
  @@index([createdAt])
  @@index([url])
  @@map("thoughts")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  thoughts  Thought[]
  sessions  Session[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String?  @db.Uuid
  deviceId  String?  @db.Uuid
  accessToken String @unique @map("access_token")
  refreshToken String @unique @map("refresh_token")
  expiresAt DateTime @map("expires_at")
  refreshExpiresAt DateTime @map("refresh_expires_at")
  isActive  Boolean  @default(true) @map("is_active")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  device    Device?  @relation(fields: [deviceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([deviceId])
  @@index([expiresAt])
  @@index([refreshExpiresAt])
  @@index([isActive])
  @@map("sessions")
}

model Device {
  id          String   @id @default(uuid()) @db.Uuid
  fingerprint String   @unique
  ipAddress   String   @map("ip_address")
  userAgent   String?  @map("user_agent")
  isActive    Boolean  @default(true) @map("is_active")
  lastSeen    DateTime @map("last_seen")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  sessions    Session[]
  auditLogs   AuditLog[]

  @@index([fingerprint])
  @@index([ipAddress])
  @@index([isActive])
  @@index([lastSeen])
  @@map("devices")
}

model Client {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  clientType  String   @map("client_type") // 'web', 'mobile', 'desktop', 'service'
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  apiKeys     ApiKey[]

  @@index([clientType])
  @@index([isActive])
  @@map("clients")
}

model ApiKey {
  id          String   @id @default(uuid()) @db.Uuid
  clientId    String   @db.Uuid
  keyHash     String   @unique @map("key_hash")
  permissions String[] // Array of permission strings
  rateLimit   Int?     @map("rate_limit") // Requests per hour
  isActive    Boolean  @default(true) @map("is_active")
  lastUsedAt  DateTime? @map("last_used_at")
  expiresAt   DateTime? @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  auditLogs   AuditLog[]

  @@index([clientId])
  @@index([keyHash])
  @@index([isActive])
  @@index([expiresAt])
  @@map("api_keys")
}

model AuditLog {
  id          String   @id @default(uuid()) @db.Uuid
  apiKeyId    String?  @db.Uuid
  deviceId    String?  @db.Uuid
  action      String   // 'login', 'logout', 'api_call', 'rate_limit_exceeded', etc.
  resource    String?  // Resource being accessed
  ipAddress   String   @map("ip_address")
  userAgent   String?  @map("user_agent")
  success     Boolean
  errorCode   String?  @map("error_code")
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  apiKey      ApiKey?  @relation(fields: [apiKeyId], references: [id], onDelete: SetNull)
  device      Device?  @relation(fields: [deviceId], references: [id], onDelete: SetNull)

  @@index([apiKeyId])
  @@index([deviceId])
  @@index([action])
  @@index([success])
  @@index([createdAt])
  @@map("audit_logs")
}
