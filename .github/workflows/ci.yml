name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  CI: true

jobs:
  # Linting and Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Run Prettier check
      run: npx prettier --check src/ tests/

    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate

  # Unit and Integration Testing
  test:
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        node-version: [18, 20]
        database: [postgresql, sqlite]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Setup test database
      run: |
        if [ "${{ matrix.database }}" = "postgresql" ]; then
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_db" > .env.test
        else
          echo "DATABASE_URL=file:./test.db" > .env.test
        fi
        echo "REDIS_URL=redis://localhost:6379" >> .env.test
        echo "JWT_SECRET=test-secret-key" >> .env.test
        echo "NODE_ENV=test" >> .env.test

    - name: Run database migrations
      run: npx prisma migrate deploy
      env:
        DATABASE_URL: ${{ matrix.database == 'postgresql' && 'postgresql://postgres:postgres@localhost:5432/test_db' || 'file:./test.db' }}

    - name: Run unit tests
      run: npm run test:coverage
      env:
        DATABASE_URL: ${{ matrix.database == 'postgresql' && 'postgresql://postgres:postgres@localhost:5432/test_db' || 'file:./test.db' }}
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key
        NODE_ENV: test

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Security and Dependency Scanning
  security:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

    - name: Check for outdated dependencies
      run: npx npm-check-updates --errorLevel 2

  # Build and Container Testing
  build-test:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and test Docker image
      run: |
        docker build -t zip-myl-backend:test .
        docker run --rm -d --name test-container -p 8080:8080 zip-myl-backend:test
        sleep 10
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container

    - name: Test production build
      run: npm run build

  # Deployment (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [code-quality, test, security, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v1
      with:
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy zip-myl-backend \
          --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/zip-myl-backend:${{ github.sha }} \
          --region us-central1 \
          --platform managed \
          --allow-unauthenticated \
          --port 8080 \
          --memory 512Mi \
          --cpu 1 \
          --min-instances 0 \
          --max-instances 10 \
          --concurrency 100 \
          --timeout 300 \
          --set-env-vars NODE_ENV=production \
          --set-secrets DATABASE_URL=DATABASE_URL:latest,REDIS_PASSWORD=REDIS_PASSWORD:latest,JWT_SECRET=JWT_SECRET:latest

    - name: Health check deployment
      run: |
        sleep 30
        curl -f ${{ secrets.CLOUD_RUN_URL }}/health || exit 1